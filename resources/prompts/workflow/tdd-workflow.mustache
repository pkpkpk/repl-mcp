# Test-Driven Development Workflow

This prompt guides you through the Red-Green-Refactor cycle for Clojure development. Follow each step sequentially.

## Function Information
- **Function Name**: {{function-name}}
- **Namespace**: {{namespace}}
- **Description**: {{description}}

---

## Step 1: ðŸ”´ RED Phase - Write Failing Tests

**Current Goal**: Create tests that define expected behavior (tests should fail initially)

### Action 1.1: Generate Test Structure (Optional)
```
Tool: create-test-skeleton
- function-name: {{function-name}}
- namespace-name: {{namespace}}
```

### Action 1.2: Write Specific Test Cases
Create a test file with tests covering:
- **Happy path**: Normal inputs â†’ expected outputs
- **Edge cases**: Empty/nil inputs, boundary conditions  
- **Error cases**: Invalid inputs, expected exceptions
- **Integration**: How function works with other functions

**Example test structure:**
```clojure
(ns {{namespace}}-test
  (:require [clojure.test :refer [deftest is testing]]
            [{{namespace}} :as sut]))

(deftest {{function-name}}-test
  (testing "happy path"
    (is (= expected-result (sut/{{function-name}} valid-input))))
  
  (testing "edge cases" 
    (is (= edge-result (sut/{{function-name}} edge-input))))
    
  (testing "error cases"
    (is (thrown? Exception (sut/{{function-name}} invalid-input)))))
```

### Action 1.3: Run Tests (Should Fail)
```
Tool: test-var-query
- var-query: {{namespace}}-test/{{function-name}}-test
```

**Expected Result**: Tests should fail because function doesn't exist yet. âœ… This is correct for RED phase!

---

## Step 2: ðŸŸ¢ GREEN Phase - Make Tests Pass

**Current Goal**: Write minimal code to make all tests pass

### Action 2.1: Create Minimal Implementation
```
Tool: eval
- code: (defn {{function-name}} [& args]
          ;; Start with the simplest implementation that could work
          nil)
```

### Action 2.2: Iterate Until Tests Pass
- **Start simple**: Hardcode return values if needed
- **Add logic gradually**: Handle one test case at a time
- **Test frequently**: Use `eval` to test individual expressions

**Example iterations:**
```
Tool: eval  
- code: ({{namespace}}/{{function-name}} test-input)
```

**Progressive implementation strategy:**
1. Hardcode return for first test
2. Add conditional logic for second test  
3. Generalize implementation for all tests

### Action 2.3: Verify All Tests Pass
```
Tool: test-var-query
- var-query: {{namespace}}-test/{{function-name}}-test
```

**Expected Result**: All tests should pass. âœ… GREEN phase complete!

### 3. ðŸ”µ REFACTOR Phase - Improve Code Quality
Once tests pass, improve the code:

1. **Code Quality Check**:
   Use structural editing to improve code structure:
   ```
   Tool: format-code
   - code: your-function-code
   ```

2. **Extract Functions** (if needed):
   ```
   Tool: extract-function
   - session-id: refactor-session
   - function-name: helper-function-name
   ```

3. **Clean Namespace**:
   ```
   Tool: clean-ns
   - file-path: path/to/your/file.clj
   ```

4. **Run Full Test Suite**:
   ```
   Tool: test-all
   ```

## Best Practices

### Test Design
- **Start Simple**: Begin with the simplest possible test case
- **One Assertion**: Each test should verify one specific behavior
- **Descriptive Names**: Test names should clearly describe what they verify
- **Given-When-Then**: Structure tests with clear setup, action, and assertion

### Implementation Strategy
- **Fake It Till You Make It**: Start with hardcoded returns, then generalize
- **Triangulation**: Add multiple test cases to drive toward the general solution
- **Obvious Implementation**: If the solution is obvious, implement it directly

### Refactoring Guidelines
- **Green Bar**: Only refactor when all tests are passing
- **Small Steps**: Make incremental improvements
- **Test Coverage**: Ensure refactoring doesn't break existing functionality

## Example TDD Session

```clojure
;; 1. RED: Write failing test
(deftest calculate-sum-test
  (testing "adds two numbers"
    (is (= 5 (calculate-sum 2 3)))))

;; 2. GREEN: Minimal implementation
(defn calculate-sum [a b]
  5) ; Hardcoded to pass test

;; 3. Add more tests (RED)
(deftest calculate-sum-test
  (testing "adds two numbers"
    (is (= 5 (calculate-sum 2 3)))
    (is (= 7 (calculate-sum 3 4))))) ; This will fail

;; 4. GREEN: Generalize implementation
(defn calculate-sum [a b]
  (+ a b))

;; 5. REFACTOR: Add validation, improve structure
(defn calculate-sum
  "Calculates the sum of two numbers"
  [a b]
  {:pre [(number? a) (number? b)]}
  (+ a b))
```

## Next Steps
1. Start with the RED phase - create your failing tests
2. Move to GREEN phase - implement minimal working code
3. Enter REFACTOR phase - improve code quality while keeping tests green
4. Repeat the cycle for additional functionality

Remember: **Red â†’ Green â†’ Refactor** - this cycle is the heart of TDD!